module Browser
    hashtbl sessions
    hashtbl WebSockets
    dim NextBid = 0
    const Chrome  = "chrome.exe"
    const Firefox = "firefox.exe"
    const MsEdge  = "msedge.exe"
    dim WebSocketId = 0
    dim eventHandler = EMPTY
    dim debug = FALSE

    procedure Browser
        if (kindofos() < 30) and ! Settings.Force() then
            msgbox("サポート外OSです")
            exitexit
        endif
    fend

    procedure Debug(b)
        debug = b
    fend

    function Chrome(port = 9222, headless = FALSE)
        result = Start(Chrome, port, headless)
    fend
    function MsEdge(port = 9222, headless = FALSE)
        result = Start(MsEdge, port, headless)
    fend
    function Firefox(port = 9222, headless = FALSE)
        result = Start(Firefox, port, headless)
    fend

    procedure SetEventHandler(proc)
        eventHandler = proc
    fend

    procedure Activate(bid)
        body = NewWebSocketBody("Page.bringToFront")
        SendWebSocket(bid, body)
    fend

    function WaitForResponse(bid, body, timeout = 10)
        limit = gettime() + timeout
        while limit > gettime()
            result = SendWebSocket(bid, body)
            if result = NOTHING then
                sleep(0.3)
            else
                break
            endif
        wend
    fend
    
    
    function Navigate(bid, url, newtab = FALSE)
        result = EMPTY
        if newtab then
            result = NewTab(bid, url)
        else
            body = NewWebSocketBody("Page.navigate")
            AddParam(body, "url", url)
            SendWebSocket(bid, body)
            WaitForPageLoad(bid)
        endif
    fend
    
    function NewTab(bid, uri)
        result = EMPTY
        port = GetPort(bid)
        host = GetHost(bid)
        res = WebRequest.Send(host, port, "/json/new?" + uri)
        if res[0] = 200 then
            obj = Json.Parse(res[1])
            SetCurrentPageId(bid, obj.id)
        endif
    fend

    function GetTabList(bid)
        result = safearray(0, -1)
        try
            port = GetPort(bid)
            host = GetHost(bid)
            res = WebRequest.Send(host, port, "/json/list")
            arr = Json.Parse("[]")
            if res[0] = 200 then
                list = Json.Parse(res[1])
                for item in list.ToSafeArray()
                    select item.type
                        case "page", "frame"
                            obj = Json.Parse("{}")
                            Json.AddObject(obj, "id", item.id)
                            if item.HasValue("title") then
                                title = item.title
                            else
                                title = ""
                            endif
                            Json.AddObject(obj, "title", title)
                            Json.AddObject(obj, "url", item.url)
                            arr.push(obj)
                    selend
                next
            endif
            result = arr.ToSafeArray()
        except
            print "GetTabList"
            print TRY_ERRLINE
            print TRY_ERRMSG
        endtry
    fend

    function CloseTab(bid, pageid)
        port = GetPort(bid)
        host = GetHost(bid)
        res = WebRequest.Send(host, port, "/json/close/" + pageid)
        result = res[0] = 200
    fend
    

    function SwitchTab(bid, pageid)
        port = GetPort(bid)
        host = GetHost(bid)
        res = WebRequest.Send(host, port, "/json/activate/" + pageid)
        result = res[0] = 200
        if result then
            SetCurrentPageId(bid, pageid)
        endif
    fend
    
    
    function GetDocument(bid)
        body = NewWebSocketBody("DOM.getDocument")
        AddParam(body, "depth", -1)
        res = SendWebSocket(bid, body)
        if res = NOTHING then
            result = EMPTY
        else
            result = res.root.nodeId
        endif
    fend

    function FindElement(bid, elementId, selector, wait = 1)
        body = NewWebSocketBody("DOM.querySelector")
        AddParam(body, "nodeId", elementId)
        AddParam(body, "selector", selector)
        // res = SendWebSocket(bid, body)
        res = WaitForResponse(bid, body, wait)
        if res = NOTHING then
            result = EMPTY
        else
            result = res.nodeId
        endif
    fend
    
    function FindElements(bid, elementId, selector, wait = 1)
        body = NewWebSocketBody("DOM.querySelectorAll")
        AddParam(body, "nodeId", elementId)
        AddParam(body, "selector", selector)
        // res = SendWebSocket(bid, body)
        res = WaitForResponse(bid, body, wait)
        if res = NOTHING then
            result = safearray(0, -1)
        else
            result = res.nodeIds.ToSafeArray()
        endif
    fend
    
    function GetAttribute(bid, elementId, attribute)
        body = NewWebSocketBody("DOM.getAttributes")
        AddParam(body, "nodeId", elementId)
        res = SendWebSocket(bid, body)
        result = EMPTY
        if res <> NOTHING then
            arr = res.attributes.ToSafeArray()
            for i = 0 to length(arr) - 1 step 2
                if arr[i] = attribute then
                    result = arr[i + 1]
                    break
                endif
            next
        endif
    fend

    function SetAttribute(bid, elementId, attribute, value)
        body = NewWebSocketBody("DOM.setAttributeValue")
        AddParam(body, "nodeId", elementId)
        AddParam(body, "name", attribute)
        AddParam(body, "value", "" + value) // 必ず文字列にする
        res = SendWebSocket(bid, body, "DOM.attributeModified")
        result = FALSE
        if res <> NOTHING then
            result = res.value = value
        endif
    fend

    // left, top, right, bottom
    function GetElementRect(bid, elementId, box = "content")
        body = NewWebSocketBody("DOM.getBoxModel")
        AddParam(body, "nodeId", elementId)
        res = SendWebSocket(bid, body)
        result = safearray(0, 3)
        if res <> NOTHING then
            dim quad
            select box
                case "content"
                    quad = res.model.content.ToSafeArray()
                case "padding"
                    quad = res.model.padding.ToSafeArray()
                case "margin"
                    quad = res.model.margin.ToSafeArray()
                case "border"
                    quad = res.model.border.ToSafeArray()
                default
                    exit
            selend
            result[0] = quad[0]
            result[1] = quad[1]
            result[2] = quad[2]
            result[3] = quad[5]
        endif
    fend
    

    procedure ClickElement(bid, elementId, button = Button.Left)
        rect = GetElementRect(bid, elementId)
        body = NewWebSocketBody("Input.dispatchMouseEvent")
        AddParam(body, "type", "mousePressed")
        AddParam(body, "x", rect[0])
        AddParam(body, "y", rect[1])
        AddParam(body, "button", button)
        AddParam(body, "clickCount", 1)
        res = SendWebSocket(bid, body)
        AddParam(body, "type", "mouseReleased")
        res = SendWebSocket(bid, body)
    fend

    function ExecuteScript(bid, script, var value)
        body = NewWebSocketBody("Runtime.evaluate")
        AddParam(body, "expression", script)
        res = SendWebSocket(bid, body)
        result = FALSE
        if res <> NOTHING then
            if res.result.HasValue("subtype") then
                result = FALSE
                value = res.result.description
            else
                result = TRUE
                value = res.result.value
            endif
        endif
    fend
    
    
    
    procedure Dispose()
        for key in WebSockets
            WinHttpWebSocketClose(WebSockets[key])
            WinHttpCloseHandle(WebSockets[key])
            WebSockets[key] = 0
        next
    fend

    // 内部関数群
    function Initialize(bid)
        body = NewWebSocketBody("Runtime.enable")
        SendWebSocket(bid, body)
        result = 0
    fend
    

    function Start(browser, port, headless)
        try
            result = -1
            select browser
                case Chrome, Firefox, MsEdge
                default
                    msgbox("不正なブラウザ")
                    exit
            selend
            if ! FindBrowser(browser, port) then
                path = Util.GetBrowserPath(browser)
                select browser
                    case Chrome, MsEdge
                        command = "<#DBL>" + path + "<#DBL> --remote-debugging-port=" + port
                        if headless then
                            command = command + " --disable-gpu --headless"
                        endif
                    case Firefox
                        command = "<#DBL>" + path + "<#DBL> --remote-debugging-port " + port
                        if headless then
                            command = command + " -headless"
                        endif
                    default
                        
                selend
                exec(command)
            endif
            dim emsg
            pid = WaitBrowser(browser, port, emsg)
            if pid > 0 then
                result = GetNextBid()
                wid = GetWindowIdFromPid(pid)
                NewSession(result, browser, "localhost", port, wid)
                list = GetTabList(result)
                if length(list) = 0 then
                    msgbox("エラー: タブ一覧の取得に失敗しました")
                    // exitexit 1
                    exit
                endif
                SetCurrentPageId(result, list[0].id)
                // Initialize(result)
            else
                if length(emsg) then
                    msgbox(emsg)
                endif
            endif
        except
            print TRY_ERRLINE
            print TRY_ERRMSG
        endtry
    fend
    
    procedure NetWorkEvent(bid, enable)
        if enable = FALSE then
            body = NewWebSocketBody("Network.disable")
        else
            body = NewWebSocketBody("Network.enable")
        endif
        SendWebSocket(bid, body)
    fend
    
    
    textblock JsonTemplate
{
    
    "id": 0,
    "method": "",
    "params": {}
}
    endtextblock

    function NewWebSocketId()
        WebSocketId = WebSocketId + 1
        result = WebSocketId
    fend

    function NewWebSocketBody(method, json = JsonTemplate)
        result = Json.Parse(json)
        result.method = method
        result.id = NewWebSocketId()
    fend

    procedure AddParam(var body, param, value)
        Json.AddObject(body.params, param, value)
    fend
    
    function GetWebSocketHandle(bid)
        session = sessions[bid]
        if ! is_safearray(session) then
            result = 0
            exit
        endif
        pageid = GetCurrentPageId(bid)

        if WebSockets[pageid, HASH_EXISTS] then
            result = WebSockets[pageid]
        else
            result = WebSocket.New(session[s_port], pageid, session[s_host])
            if result <> 0 then
                WebSockets[pageid] = result
            endif
        endif
    fend

textblock json_get_ready_state
{
    
    "id": 0,
    "method": "",
    "params": {
        "awaitPromise": false,
        "expression": "document.readyState",
        "returnByValue": true
   }
}
endtextblock
textblock json_do_nothing
{
    
    "id": 0,
    "method": "",
    "params": {
        "expression": "1"
   }
}
endtextblock


    function WaitForPageLoad(bid, timeout = 10)
        limit = gettime() + timeout
        result = FALSE
        h = GetWebSocketHandle(bid)
        body = NewWebSocketBody("Runtime.evaluate", json_get_ready_state)
        jbody = Json.Stringify(body)
        once = FALSE
        repeat
            res = WebSocket.Send(h, jbody)
            obj = Json.Parse(res)
            if DEBUG then
                print "[DEBUG: WaitForPageLoad] " + res
            endif
            select TRUE
                case obj.HasValue("method")
                case obj.HasValue("result")
                    if obj.id = body.id then
                        if obj.result.result.value = "complete" then
                            result = TRUE
                            break
                        // else
                        //     body = NewWebSocketBody("Runtime.evaluate", json_get_ready_state)
                        //     jbody = Json.Stringify(body)
                        //     once = FALSE
                        endif
                    endif
                case obj.HasValue("error")
                    
                default
                    
            selend
            sleep(0.3)
            // if ! once then
            //     once = TRUE
            //     body = NewWebSocketBody("Runtime.evaluate", json_do_nothing)
            //     jbody = Json.Stringify(body)
            // endif
        until limit < gettime()
    fend
    

    function SendWebSocket(bid, body, event = "", raw = FALSE)
        h = GetWebSocketHandle(bid)
        ok = FALSE
        // 送信したIDでレスポンスが返るまで繰り返す
        jbody = Json.Stringify(body)
        if debug then
            print "[DEBUG] [SendWebSocket]"
        endif
        result = NOTHING
        repeat
            if debug then
                print "        [body ("+lengthb(jbody)+")] " + jbody
            endif
            res = WebSocket.Send(h, jbody)
            if debug then
                print "        [response] " + res
            endif
            obj = Json.Parse(res)
            select TRUE
                // 結果が帰ってIDが一致したら成功
                case obj.HasValue("result")
                    ok = obj.id = body.id
                    if raw then
                        result = JSON.Stringify(obj, 2, TRUE)
                    else
                        if length(event) = 0 then
                            result = obj.result
                        endif
                    endif
                // イベント発生
                case obj.HasValue("method")
                    if debug then
                        print "        [EVENT] " + res
                    endif
                    if event = obj.method then
                        result = obj.params
                    endif
                    if length(eventHandler) then
                        j = Json.Stringify(obj, 2, TRUE)
                        eval(eventHandler + "(obj, j)")
                    endif
                // エラー発生時はNOTHING返して終了
                case obj.HasValue("error")
                    if debug then
                        print "        [ERROR] " + res
                    endif
                    result = NOTHING
                    exit
                default
                    
            selend
        until ok
    fend

    function GetNextBid()
        NextBid = NextBid + 1
        result = NextBid
    fend

    const s_browser = 0
    const s_host    = 1
    const s_port    = 2
    const s_current = 3
    const s_wid     = 4
    const session_array_ubound = 4
    
    procedure NewSession(bid, browser, host, port, wid)
        session = safearray(0, session_array_ubound)

        session[s_browser] = browser
        session[s_host]    = host
        session[s_port]    = port
        session[s_current] = EMPTY
        session[s_wid]     = wid

        sessions[bid] = session
    fend

    function is_safearray(v)
        result = (vartype(v) and VAR_ARRAY) > 0
    fend
    

    function SetCurrentPageId(bid, pageid)
        session = sessions[bid]
        result = is_safearray(session)
        if result then
            session[s_current] = pageid
            sessions[bid] = session
        endif
    fend
    
    function GetCurrentPageId(bid)
        session = sessions[bid]
        if is_safearray(session) then
            result = session[s_current]
        else
            result = EMPTY
        endif
    fend

    function GetPort(bid)
        session = sessions[bid]
        if is_safearray(session) then
            result = session[s_port]
        else
            result = 0
        endif
    fend
    
    function GetHost(bid)
        session = sessions[bid]
        if is_safearray(session) then
            result = session[s_host]
        else
            result = EMPTY
        endif
    fend

    function GetWindowId(bid)
        session = sessions[bid]
        if is_safearray(session) then
            result = session[s_wid]
        else
            result = EMPTY
        endif
    fend
    
    
    function GetWindowIdFromPid(processId)
        result = -1
        for id in getallwin()
            if status(id, ST_PROCESS) = processId then
                result = id
                break
            endif
        next
    fend
    

    function FindBrowser(name, port)
        result = FALSE
        with createoleobj("WbemScripting.SWbemLocator")
            with .ConnectServer(".", "Root\StandardCimv2")
                connection = .ExecQuery("select OwningProcess from MSFT_NetTCPConnection where LocalPort = " + port + " and state = 2")
                if connection.count then
                    pid = connection.ItemIndex(0).Properties_("OwningProcess").Value
                else
                    exit
                endif
            endwith
            with .ConnectServer()
                process = .ExecQuery("select Name,ProcessId from win32_process where ProcessId = " + pid)
                if process.count then
                    pname = process.ItemIndex(0).Properties_("Name").Value
                else
                    exit
                endif
            endwith
        endwith
        result = pname = name
    fend
    
    function WaitBrowser(name, port, var emsg, timeout = 5)
        result = 0
        with createoleobj("WbemScripting.SWbemLocator")
            with .ConnectServer(".", "Root\StandardCimv2")
                limit = gettime() + timeout
                repeat
                    if gettime() > limit then
                        emsg = port + "で待ち受けているプロセスがありません"
                        exit
                    endif
                    connection = .ExecQuery("select OwningProcess from MSFT_NetTCPConnection where LocalPort = " + port + " and state = 2")
                until connection.count > 0
                pid = connection.ItemIndex(0).Properties_("OwningProcess").Value
            endwith
            with .ConnectServer()
                process = .ExecQuery("select Name from win32_process where ProcessId = " + pid)
                if process.count then
                    pname = process.ItemIndex(0).Properties_("Name").Value
                    if pname = name then
                        result = pid
                    endif
                else
                    exit
                endif
            endwith
        endwith
        if ! result then
            emsg = port + "で待ち受けているプロセスが" + name + "ではありません (" + pname + ")"
        endif
    fend
endmodule
